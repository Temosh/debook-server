package com.summ.debook.entity;
// Generated Jan 23, 2016 2:48:02 AM by Hibernate Tools 4.3.1.Final

import com.fasterxml.jackson.annotation.JsonIgnore;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * UserEntity generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "debook_db", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
        @UniqueConstraint(columnNames = "login") })
public class UserEntity implements java.io.Serializable {

    @JsonIgnore
    private int userId;
    @JsonIgnore
    private String login;
    private String name;
    private String surname;
    private String email;
    @JsonIgnore
    private boolean activated;
    @JsonIgnore
    private Set<DebtEntity> debtsForCreditorUserId = new HashSet<DebtEntity>(0);
    @JsonIgnore
    private Set<LocalDebtEntity> localDebts = new HashSet<LocalDebtEntity>(0);
    @JsonIgnore
    private UserSecretEntity userSecret;
    @JsonIgnore
    private Set<DebtEntity> debtsForDebtorUserId = new HashSet<DebtEntity>(0);
    @JsonIgnore
    private Set<LocalUserEntity> localUsers = new HashSet<LocalUserEntity>(0);
    @JsonIgnore
    private Set<AuthoritiesEntity> authoritieses = new HashSet<AuthoritiesEntity>(0);

    public UserEntity() {
    }

    public UserEntity(int userId, String login, String name, String email, boolean activated) {
        this.userId = userId;
        this.login = login;
        this.name = name;
        this.email = email;
        this.activated = activated;
    }

    public UserEntity(int userId, String login, String name, String surname, String email, boolean activated,
                      Set<DebtEntity> debtsForCreditorUserId, Set<LocalDebtEntity> localDebts, UserSecretEntity userSecret,
                      Set<DebtEntity> debtsForDebtorUserId, Set<LocalUserEntity> localUsers, Set<AuthoritiesEntity> authoritieses) {
        this.userId = userId;
        this.login = login;
        this.name = name;
        this.surname = surname;
        this.email = email;
        this.activated = activated;
        this.debtsForCreditorUserId = debtsForCreditorUserId;
        this.localDebts = localDebts;
        this.userSecret = userSecret;
        this.debtsForDebtorUserId = debtsForDebtorUserId;
        this.localUsers = localUsers;
        this.authoritieses = authoritieses;
    }

    @Id
    @Column(name = "user_id", unique = true, nullable = false)
    public int getUserId() {
        return this.userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    @Column(name = "login", unique = true, nullable = false, length = 45)
    public String getLogin() {
        return this.login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    @Column(name = "name", nullable = false, length = 45)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "surname", length = 45)
    public String getSurname() {
        return this.surname;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    @Column(name = "email", unique = true, nullable = false, length = 45)
    public String getEmail() {
        return this.email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Column(name = "activated", nullable = false)
    public boolean isActivated() {
        return this.activated;
    }

    public void setActivated(boolean activated) {
        this.activated = activated;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "userByCreditorUserId")
    public Set<DebtEntity> getDebtsForCreditorUserId() {
        return this.debtsForCreditorUserId;
    }

    public void setDebtsForCreditorUserId(Set<DebtEntity> debtsForCreditorUserId) {
        this.debtsForCreditorUserId = debtsForCreditorUserId;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
    public Set<LocalDebtEntity> getLocalDebts() {
        return this.localDebts;
    }

    public void setLocalDebts(Set<LocalDebtEntity> localDebts) {
        this.localDebts = localDebts;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "user")
    public UserSecretEntity getUserSecret() {
        return this.userSecret;
    }

    public void setUserSecret(UserSecretEntity userSecret) {
        this.userSecret = userSecret;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "userByDebtorUserId")
    public Set<DebtEntity> getDebtsForDebtorUserId() {
        return this.debtsForDebtorUserId;
    }

    public void setDebtsForDebtorUserId(Set<DebtEntity> debtsForDebtorUserId) {
        this.debtsForDebtorUserId = debtsForDebtorUserId;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
    public Set<LocalUserEntity> getLocalUsers() {
        return this.localUsers;
    }

    public void setLocalUsers(Set<LocalUserEntity> localUsers) {
        this.localUsers = localUsers;
    }

    @OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
    public Set<AuthoritiesEntity> getAuthoritieses() {
        return this.authoritieses;
    }

    public void setAuthoritieses(Set<AuthoritiesEntity> authoritieses) {
        this.authoritieses = authoritieses;
    }

    @Override
    public String toString() {
        return "UserEntity{" +
                "userId=" + userId +
                ", login='" + login + '\'' +
                ", name='" + name + '\'' +
                ", surname='" + surname + '\'' +
                ", email='" + email + '\'' +
                ", activated=" + activated +
                ", debtsForCreditorUserId=" + debtsForCreditorUserId +
                ", localDebts=" + localDebts +
                ", userSecret=" + userSecret +
                ", debtsForDebtorUserId=" + debtsForDebtorUserId +
                ", localUsers=" + localUsers +
                ", authoritieses=" + authoritieses +
                '}';
    }
}
